/*! qunit-image v0.0.2 MathLib.de | MathLib.de/en/license */
!function(){var a=function(a){var b=[];return b.push('<div class="qunit-image-wrapper">  <div>   Testing a '),b.push(a.width),b.push("px by "),b.push(a.height),b.push("px image ("),b.push(a.numPixels),b.push(" total pixels, "),b.push(a.numChannels),b.push(" channels).  </div>  <div>   There were errors on "),b.push(a.channelErrors),b.push(" channels ("),b.push(a.channelErrorsPercent),b.push("%).  </div>  <div>   The very primitive accumulated rgba-distance of the images is "),b.push(a.imageDistance),b.push('.  </div>  <div class="qunit-image-clearfix">   <div style="width:'),b.push(a.width),b.push("px; height:"),b.push(a.containerHeight),b.push('px;" class="qunit-image-figure">    <div class="qunit-image-figcaption">The actual image</div>    <img class="qunit-image-img qunit-image-marginTop" src="'),b.push(a.actCanvas),b.push('" width="'),b.push(a.width),b.push('px" height="'),b.push(a.imageHeight),b.push('px" data-id="'),b.push(a.id),b.push('"/>   </div>    <div style="width:'),b.push(a.width),b.push("px; height:"),b.push(a.containerHeight),b.push('px;" class="qunit-image-figure">    <div class="qunit-image-figcaption">The reference image</div>    <img class="qunit-image-img qunit-image-marginTop" src="'),b.push(a.expCanvas),b.push('" width="'),b.push(a.width),b.push('px" height="'),b.push(a.imageHeight),b.push('px" data-id="'),b.push(a.id),b.push('"/>   </div>    <div style="width:'),b.push(a.width),b.push("px; height:"),b.push(a.containerHeight),b.push('px;" class="qunit-image-figure">    <div class="qunit-image-figcaption">     <select class="qunit-image-select">      <option value="0">difference heatmap</option>      <option value="1">clip slider</option>      <option value="2">opacity slider</option>     </select>    </div>     <div>     <img src="'),b.push(a.diffCanvas),b.push('" class="qunit-image-img qunit-image-comparisonImage qunit-image-isVisible qunit-image-marginTop" width="'),b.push(a.width),b.push('px" height="'),b.push(a.imageHeight),b.push('px" data-id="'),b.push(a.id),b.push('"/>      <div class="qunit-image-comparisonImage">      <input type="range" min="0" max="'),b.push(a.width),b.push('" class="qunit-image-slider qunit-image-range-clip" style="width:'),b.push(a.width),b.push('px;">      <div class="qunit-image-absoluteContainer" style="width:'),b.push(a.width),b.push("px; height:"),b.push(a.imageHeight),b.push('px">       <img class="qunit-image-img" src="'),b.push(a.actCanvas),b.push('" width="'),b.push(a.width),b.push('px" height="'),b.push(a.imageHeight),b.push('px"          style="clip: rect(0px, '),b.push(a.width),b.push("px, "),b.push(a.height),b.push("px, "),b.push(a.width/2),b.push('px)" data-id="'),b.push(a.id),b.push('"/>       <img class="qunit-image-img" src="'),b.push(a.expCanvas),b.push('" width="'),b.push(a.width),b.push('px" height="'),b.push(a.imageHeight),b.push('px"          style="clip: rect(0px, '),b.push(a.width/2),b.push("px, "),b.push(a.height),b.push('px, 0px)" data-id="'),b.push(a.id),b.push('"/>      </div>     </div>      <div class="qunit-image-comparisonImage">      <input type="range" min="0" max="1" step="0.01" class="qunit-image-range-opacity" style="width:'),b.push(a.width),b.push('px;">      <div class="qunit-image-absoluteContainer" style="width:'),b.push(a.width),b.push("px; height:"),b.push(a.imageHeight),b.push('px">       <img class="qunit-image-img" src="'),b.push(a.actCanvas),b.push('" width="'),b.push(a.width),b.push('px" height="'),b.push(a.imageHeight),b.push('px" style="opacity: 0.5" data-id="'),b.push(a.id),b.push('"/>       <img class="qunit-image-img" src="'),b.push(a.expCanvas),b.push('" width="'),b.push(a.width),b.push('px" height="'),b.push(a.imageHeight),b.push('px" style="opacity: 0.5" data-id="'),b.push(a.id),b.push('"/>      </div>     </div>    </div>   </div>     <div id="qunit-image-pixelComparison-'),b.push(a.id),b.push('" style="width:'),b.push(a.width),b.push("px; height:"),b.push(a.containerHeight),b.push('px;" class="qunit-image-figure">    <div>     Hover one of the images to get a pixel comparison.    </div>    <div style="display: none">     At the currently hovered coordinate (<span class="qunit-image-xCoordinate"></span>, <span class="qunit-image-yCoordinate"></span>) the following colors are found:     <table class="qunit-image-colorTable">      <thead>       <tr>        <th></th>        <th>actual</th>        <th>expected</th>       </tr>      </thead>      <tbody>       <tr>        <td>Red</td>        <td class="qunit-image-table-rAct"></td>        <td class="qunit-image-table-rExp"></td>       </tr>       <tr>        <td>Green</td>        <td class="qunit-image-table-gAct"></td>        <td class="qunit-image-table-gExp"></td>       </tr>       <tr>        <td>Blue</td>        <td class="qunit-image-table-bAct"></td>        <td class="qunit-image-table-bExp"></td>       </tr>       <tr>        <td>Alpha</td>        <td class="qunit-image-table-aAct"></td>        <td class="qunit-image-table-aExp"></td>       </tr>       <tr>        <td></td>        <td class="qunit-image-table-act"></td>        <td class="qunit-image-table-exp"></td>       </tr>      </tbody>     </table>    </div>   </div>     </div> </div>'),b.join("")};QUnit.extend(QUnit.assert,{imageEqual:function(b,c,d){d=d||{};var e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w=document.createElement("canvas"),x=document.createElement("canvas"),y=document.createElement("canvas"),z=0,A=0,B=!1,C=!0,D=d.width||300,E=d.height||300,F=80,G=510/F;window.qunitImage=window.qunitImage||{tests:[],id:0},m=function(){for(j=i.getImageData(0,0,D,E).data,g=f.getImageData(0,0,D,E).data,y.height=E,y.width=D,k=y.getContext("2d"),l=k.getImageData(0,0,D,E),o=0,p=4*D*E;p>o;o+=4)q=Math.abs(j[o]-g[o]),r=Math.abs(j[o+1]-g[o+1]),s=Math.abs(j[o+2]-g[o+2]),t=Math.abs(j[o+3]-g[o+3]),v=q+r+s+t,A+=v,z+=!!q+!!r+!!s+!!t,u=G*Math.min(F,v),l.data[o]=Math.min(255,u),l.data[o+1]=Math.min(255,510-u),l.data[o+2]=0,l.data[o+3]=255;k.putImageData(l,0,0),"imageDistance"in d||"channelErrors"in d?("imageDistance"in d&&(C=C&&4*D*E*d.imageDistance>A),"channelErrors"in d&&(C=C&&4*D*E*d.channelErrors>z)):C=.5*4*D*E>A,n=a({id:window.qunitImage.id,width:D,imageHeight:E,containerHeight:E+30,numPixels:E*D,numChannels:4*E*D,channelErrors:z,channelErrorsPercent:(25*z/(D*E)).toFixed(3),imageDistance:A,actCanvas:w.toDataURL(),expCanvas:x.toDataURL(),diffCanvas:y.toDataURL()}),window.qunitImage.tests.push({id:window.qunitImage.id,width:D,height:E,channelErrors:z,imageDistance:A,actual:{canvas:w,ctx:f,data:g},expected:{canvas:x,ctx:i,data:j},diffCanvas:{canvas:y,ctx:k,data:l}}),window.qunitImage.id++,QUnit.config.current.assertions.push({result:C,message:n})},"[object SVGSVGElement]"===b.toString()&&(b=(new XMLSerializer).serializeToString(b)),"string"==typeof b?(e=new Image,e.onload=function(){w.height=E,w.width=D,f=w.getContext("2d"),f.drawImage(e,0,0),B?(0!==QUnit.config.semaphore&&QUnit.start(),m()):B=!0},b.startsWith("<svg")&&(b="data:image/svg+xml;base64,"+btoa(b)),e.src=b):"[object HTMLCanvasElement]"===b.toString()?(w=b,f=w.getContext("2d"),B?(0!==QUnit.config.semaphore&&QUnit.start(),m()):B=!0):(QUnit.start(),QUnit.config.current.assertions.push({result:!1,message:'Expected string, Canvas or SVG element in the "actual" argument but found: '+Object.prototype.toString.call(b).slice(8,-1)})),"[object SVGSVGElement]"===c.toString()&&(c=(new XMLSerializer).serializeToString(c)),"string"==typeof c?(h=new Image,h.onload=function(){x.height=E,x.width=D,i=x.getContext("2d"),i.drawImage(h,0,0),B?(0!==QUnit.config.semaphore&&QUnit.start(),m()):B=!0},c.startsWith("<svg")&&(c="data:image/svg+xml;base64,"+btoa(c)),h.src=c):"[object HTMLCanvasElement]"===c.toString()?(x=c,i=x.getContext("2d"),B?(0!==QUnit.config.semaphore&&QUnit.start(),m()):B=!0):QUnit.config.current.assertions.push({result:!1,message:'Expected string, Canvas or SVG element in the "expected" argument but found: '+Object.prototype.toString.call(c).slice(8,-1)})}}),QUnit.done(function(){Array.prototype.forEach.call(document.getElementsByClassName("qunit-image-select"),function(a){a.addEventListener("change",function(a){var b=a.target.parentElement.nextElementSibling;b.getElementsByClassName("qunit-image-isVisible")[0].classList.remove("qunit-image-isVisible"),b.children[a.target.value].classList.add("qunit-image-isVisible")})}),Array.prototype.forEach.call(document.getElementsByClassName("qunit-image-range-clip"),function(a){a.addEventListener("input",function(a){a.target.nextElementSibling.children[0].style.setProperty("clip","rect(0px, 300px, 300px, "+a.target.value+"px)"),a.target.nextElementSibling.children[1].style.setProperty("clip","rect(0px, "+a.target.value+"px, 300px, 0px)")})}),Array.prototype.forEach.call(document.getElementsByClassName("qunit-image-range-opacity"),function(a){a.addEventListener("input",function(a){a.target.nextElementSibling.children[0].style.setProperty("opacity",1-a.target.value),a.target.nextElementSibling.children[1].style.setProperty("opacity",a.target.value)})}),Array.prototype.forEach.call(document.getElementsByClassName("qunit-image-img"),function(a){a.addEventListener("mouseover",function(a){var b=a.target.getAttribute("data-id"),c=document.getElementById("qunit-image-pixelComparison-"+b);c.children[0].style.setProperty("display","none"),c.children[1].style.setProperty("display","block")},!1)}),Array.prototype.forEach.call(document.getElementsByClassName("qunit-image-img"),function(a){a.addEventListener("mouseout",function(a){var b=a.target.getAttribute("data-id"),c=document.getElementById("qunit-image-pixelComparison-"+b);c.children[0].style.setProperty("display","block"),c.children[1].style.setProperty("display","none")},!1)}),Array.prototype.forEach.call(document.getElementsByClassName("qunit-image-img"),function(a){a.addEventListener("mousemove",function(a){var b=a.target.getAttribute("data-id"),c=document.getElementById("qunit-image-pixelComparison-"+b),d=window.qunitImage.tests[b],e="offsetX"in a?a.offsetX:a.layerX,f="offsetY"in a?a.offsetY:a.layerY,g=d.actual.ctx.getImageData(e,f,1,1).data,h=d.expected.ctx.getImageData(e,f,1,1).data;c.getElementsByClassName("qunit-image-xCoordinate")[0].innerHTML=e,c.getElementsByClassName("qunit-image-yCoordinate")[0].innerHTML=f,c.getElementsByClassName("qunit-image-table-rAct")[0].innerHTML=g[0],c.getElementsByClassName("qunit-image-table-gAct")[0].innerHTML=g[1],c.getElementsByClassName("qunit-image-table-bAct")[0].innerHTML=g[2],c.getElementsByClassName("qunit-image-table-aAct")[0].innerHTML=g[3],c.getElementsByClassName("qunit-image-table-rExp")[0].innerHTML=h[0],c.getElementsByClassName("qunit-image-table-gExp")[0].innerHTML=h[1],c.getElementsByClassName("qunit-image-table-bExp")[0].innerHTML=h[2],c.getElementsByClassName("qunit-image-table-aExp")[0].innerHTML=h[3],c.getElementsByClassName("qunit-image-table-act")[0].style.setProperty("background","rgba("+g[0]+","+g[1]+","+g[2]+","+g[3]+")"),c.getElementsByClassName("qunit-image-table-exp")[0].style.setProperty("background","rgba("+h[0]+","+h[1]+","+h[2]+","+h[3]+")")},!1)})})}();